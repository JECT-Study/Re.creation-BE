openapi: 3.0.3
info:
  title: Re:creat!on API
  description: Re:creat!on 서비스 API 문서 (MVP)
  version: 1.0.2
  contact:
    name: Re:creat!on Team

components:
  securitySchemes:
    sessionAuth:
      type: apiKey
      in: cookie
      name: sessionId
      description: 세션 기반 인증을 위한 쿠키

  schemas:
    # 공통 응답 형식
    ApiResponse:
      type: object
      required:
        - result
      properties:
        result:
          type: string
          enum: [SUCCESS, ERROR]
          description: 요청 성공 결과
        data:
          type: object
          nullable: true
          description: 요청 결과 데이터. 에러 시 null
        error:
          $ref: '#/components/schemas/ErrorInfo'
          nullable: true
          description: 에러 정보 데이터. 요청 성공 시 null

    # 에러 정보 형식
    ErrorInfo:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
          description: 에러 코드값(백엔드에서 정의)
        message:
          type: string
          description: 에러 상세 내용
        data:
          type: object
          nullable: true
          description: 에러를 발생시킨 데이터

    # 카카오 로그인 요청
    KakaoLoginRequest:
      type: object
      required:
        - code
        - type
      properties:
        code:
          type: string
          description: 카카오에서 발급받은 코드
        type:
          type: string
          enum: [kakao]
          description: 플랫폼명

    # 카카오 로그인 응답 데이터
    KakaoLoginResponse:
      type: object
      properties:
        profileImageUrl:
          type: string
          description: 프로필 이미지 경로
        nickname:
          type: string
          description: 닉네임
        email:
          type: string
          description: 이메일

    # 게임 정보
    Game:
      type: object
      properties:
        gameId:
          type: string
          format: uuid
          description: 게임 식별자
        gameThumbnailUrl:
          type: string
          description: 게임 썸네일 이미지 경로
        gameTitle:
          type: string
          description: 게임명
        questionCount:
          type: integer
          description: 문제 개수
        playCount:
          type: integer
          description: 플레이횟수
        updatedAt:
          type: string
          format: date-time
          description: 게임 수정 일시

    # 게임 목록 조회 응답 데이터
    GameListResponse:
      type: object
      properties:
        games:
          type: array
          items:
            $ref: '#/components/schemas/Game'
          description: 게임 목록

    # 사용자 게임 정보
    UserGame:
      type: object
      properties:
        gameId:
          type: string
          format: uuid
          description: 게임 식별자
        gameThumbnailUrl:
          type: string
          description: 게임 썸네일 이미지 경로
        gameTitle:
          type: string
          description: 게임명
        questionCount:
          type: integer
          description: 문제 개수
        isShared:
          type: boolean
          description: 공유 여부
        playCount:
          type: integer
          description: 플레이 횟수
        updateAt:
          type: string
          format: date-time
          description: 게임 수정 일시

    # 사용자 게임 목록 조회 응답 데이터
    UserGameListResponse:
      type: object
      properties:
        games:
          type: array
          items:
            $ref: '#/components/schemas/UserGame'
          description: 게임 목록

    # 문제 정보
    Question:
      type: object
      properties:
        questionId:
          type: integer
          description: 문제 식별자
        questionOrder:
          type: integer
          description: 문제 순서
        imageUrl:
          type: string
          description: 문제 이미지 경로
        questionText:
          type: string
          description: 질문 내용
        questionAnswer:
          type: string
          description: 질문 정답
        version:
          type: integer
          description: 문제 버전

    # 게임 상세 정보 응답 데이터
    GameDetailResponse:
      type: object
      properties:
        gameTitle:
          type: string
          description: 게임명
        nickname:
          type: string
          description: 제작자 닉네임
        quetionCount:
          type: integer
          description: 문제 수
        version:
          type: integer
          description: 게임 버전
        questions:
          type: array
          items:
            $ref: '#/components/schemas/Question'
          description: 문제 배열

    # 게임 등록 요청 스키마
    GameCreateRequest:
      type: object
      required:
        - gameId
        - gameTitle
        - gameThumbnailUrl
        - questions
      properties:
        gameId:
          type: string
          format: uuid
          description: 게임 식별자
        gameTitle:
          type: string
          description: 게임명
        gameThumbnailUrl:
          type: string
          description: 게임 썸네일 이미지 경로
        questions:
          type: array
          items:
            $ref: '#/components/schemas/GameCreateQuestion'
          description: 문제 배열

    GameCreateQuestion:
      type: object
      required:
        - imageUrl
        - questionOrder
        - questionText
        - questionAnswer
      properties:
        imageUrl:
          type: string
          nullable: true
          description: 문제 이미지 경로 (없을 시 null)
        questionOrder:
          type: integer
          description: 문제 순서 (0부터 시작)
        questionText:
          type: string
          description: 질문 내용
        questionAnswer:
          type: string
          description: 질문 정답

    GameUpdateRequest:
      type: object
      required:
        - gameTitle
        - gameThumbnailUrl
        - questions
        - version
      properties:
        gameTitle:
          type: string
          description: 게임명
        gameThumbnailUrl:
          type: string
          description: 게임 썸네일 이미지 경로
        version:
          type: integer
          description: 게임 버전
        questions:
          type: array
          items:
            $ref: '#/components/schemas/GameUpdateQuestion'
          description: 문제 배열

    GameUpdateQuestion:
      type: object
      required:
        - imageUrl
        - questionOrder
        - questionText
        - questionAnswer
      properties:
        imageUrl:
          type: string
          nullable: true
          description: 문제 이미지 경로 (없을 시 null)
        questionOrder:
          type: integer
          description: 문제 순서 (0부터 시작)
        questionText:
          type: string
          description: 질문 내용
        questionAnswer:
          type: string
          description: 질문 정답

    PresignedUrlImage:
      type: object
      required:
        - imageName
        - questionOrder
      properties:
        imageName:
          type: string
          description: 파일명(xxx.png 등)
        questionOrder:
          type: integer
          description: 해당 이미지가 쓰이는 문제의 순서

    PresignedUrlRequest:
      type: object
      required:
        - images
      properties:
        images:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/PresignedUrlImage'
          description: 업로드할 이미지들의 정보 배열

    PresignedUrlResponseItem:
      type: object
      properties:
        imageName:
          type: string
          description: 파일명(xxx.png 등)
        questionOrder:
          type: integer
          description: 해당 이미지가 쓰이는 문제의 순서
        url:
          type: string
          description: 해당 이미지를 업로드할 수 있는 presigned url
        key:
          type: string
          description: 해당 이미지가 저장될 S3 경로 (games/{gameId}/imageName 형식)

    PresignedUrlResponse:
      type: object
      properties:
        gameId:
          type: string
          format: uuid
          description: 게임 식별자
        presignedUrls:
          type: array
          items:
            $ref: '#/components/schemas/PresignedUrlResponseItem'
          description: presigned URL 정보 배열 (요청한 이미지 수와 동일)

  responses:
    # 공통 응답들
    SuccessResponse:
      description: 성공 응답
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ApiResponse'
              - type: object
                properties:
                  result:
                    enum: [SUCCESS]
                  error:
                    enum: [null]

    Error403Response:
      description: 권한 없음
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ApiResponse'
              - type: object
                properties:
                  result:
                    enum: [ERROR]
                  data:
                    enum: [null]
                  error:
                    $ref: '#/components/schemas/ErrorInfo'

    Error404Response:
      description: 리소스를 찾을 수 없음
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ApiResponse'
              - type: object
                properties:
                  result:
                    enum: [ERROR]
                  data:
                    enum: [null]
                  error:
                    $ref: '#/components/schemas/ErrorInfo'

    Error401Response:
      description: 인증 필요
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ApiResponse'
              - type: object
                properties:
                  result:
                    enum: [ERROR]
                  data:
                    enum: [null]
                  error:
                    $ref: '#/components/schemas/ErrorInfo'

    Error409Response:
      description: 중복된 게임 UUID
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ApiResponse'
              - type: object
                properties:
                  result:
                    enum: [ERROR]
                  data:
                    enum: [null]
                  error:
                    $ref: '#/components/schemas/ErrorInfo'

paths:
  /login/kakao:
    post:
      summary: 카카오 로그인
      description: 카카오로 로그인합니다.
      tags:
        - 인가/인증
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KakaoLoginRequest'
            example:
              code: "xxx"
              type: "kakao"
      responses:
        '200':
          description: 로그인 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      result:
                        enum: [SUCCESS]
                      data:
                        $ref: '#/components/schemas/KakaoLoginResponse'
                      error:
                        enum: [null]
              example:
                result: "SUCCESS"
                data:
                  profileImageUrl: "xxx"
                  nickname: "xxx"
                  email: "xxx"
                error: null
          headers:
            Set-Cookie:
              description: 세션 ID가 포함된 쿠키
              schema:
                type: string
                example: "sessionId=abc123; Path=/; HttpOnly"
        '403':
          $ref: '#/components/responses/Error403Response'
        '404':
          $ref: '#/components/responses/Error404Response'

  /games/default:
    get:
      summary: 홈 화면 게임 목록 조회
      description: |
        홈 화면에 노출될 게임 목록을 조회합니다.
      tags:
        - 게임
      responses:
        '200':
          description: 홈 화면 게임 목록 조회 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      result:
                        enum: [SUCCESS]
                      data:
                        $ref: '#/components/schemas/GameListResponse'
                      error:
                        enum: [null]
              example:
                result: "SUCCESS"
                error: null
                data:
                  games:
                    - gameId: "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
                      gameThumbnailUrl: "xxx"
                      gameTitle: "xxx"
                      questionCount: 10
                      playCount: 100
                      updatedAt: "2025-07-11T13:45:30Z"
                    - gameId: "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
                      gameThumbnailUrl: "xxx"
                      gameTitle: "xxx"
                      questionCount: 10
                      playCount: 99
                      updatedAt: "2025-07-11T13:45:30Z"

  /games:
    get:
      summary: 게임 라이브러리 화면 게임 목록 조회
      description: |
        게임 목록을 조회합니다. (삭제 처리된 게임, 비공유 상태 게임 제외)
        
        정렬 기준:
        1. 플레이횟수(playCount) 기준 내림차순
        2. 게임수정일시(updatedAt) 기준 내림차순 (플레이 횟수가 같을 시) 
        3. 게임식별자(gameId) 기준 내림차순 (플레이 횟수, 게임수정일시가 같을 시)
      tags:
        - 게임
      parameters:
        - name: cursorGameId
          in: query
          description: 직전 API 호출에서 가져온 마지막 게임의 gameId
          required: false
          schema:
            type: string
            format: uuid
        - name: cursorPlayCount
          in: query
          description: 직전 API 호출에서 가져온 마지막 게임의 playCount
          required: false
          schema:
            type: integer
        - name: cursorUpdatedAt
          in: query
          description: |
            직전 API 호출에서 가져온 마지막 게임의 updatedAt  
            예시: 2025-07-11T13:45:30
          required: false
          schema:
            type: string
            format: date-time
        - name: limit
          in: query
          description: cursor로부터 몇 개의 데이터를 가져올 것인지에 해당하는 값
          required: true
          schema:
            type: integer
            minimum: 1
        - name: query
          in: query
          description: Null이 아닐 시 해당 문자열이 포함된 게임명만 필터링
          required: false
          schema:
            type: string
      responses:
        '200':
          description: 게임 목록 조회 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      result:
                        enum: [SUCCESS]
                      data:
                        $ref: '#/components/schemas/GameListResponse'
                      error:
                        enum: [null]
              example:
                result: "SUCCESS"
                error: null
                data:
                  games:
                    - gameId: "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
                      gameThumbnailUrl: "xxx"
                      gameTitle: "xxx"
                      questionCount: 10
                      playCount: 100
                      updatedAt: "2025-07-11T13:45:30Z"
                    - gameId: "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
                      gameThumbnailUrl: "xxx"
                      gameTitle: "xxx"
                      questionCount: 10
                      playCount: 99
                      updatedAt: "2025-07-11T13:45:30Z"
        '404':
          description: cursor로 지정한 게임이 존재하지 않음
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      result:
                        enum: [ERROR]
                      data:
                        enum: [null]
                      error:
                        $ref: '#/components/schemas/ErrorInfo'
              example:
                result: "ERROR"
                data: null
                error:
                  code: "E404"
                  message: "해당 게임이 존재하지 않습니다."
                  data:
                    gameId: "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
    post:
      summary: 게임 신규 등록
      description: 게임을 신규 등록합니다. 문제 이미지들은 presigned url 발급 API로 발급받은 url에 업로드된 상태라고 가정합니다.
      tags:
        - 게임
      security:
        - sessionAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GameCreateRequest'
            example:
              gameId: "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
              gameTitle: "xxx"
              gameThumbnailUrl: "xxx"
              questions:
                - imageUrl: "xxx"
                  questionOrder: 0
                  questionText: "xxx"
                  questionAnswer: "xxx"
                - imageUrl: "xxx"
                  questionOrder: 1
                  questionText: "xxx"
                  questionAnswer: "xxx"
      responses:
        '200':
          description: 게임 등록 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      result:
                        enum: [SUCCESS]
                      data:
                        enum: [null]
                      error:
                        enum: [null]
              example:
                result: "SUCCESS"
                data: null
                error: null
        '401':
          description: 로그인이 필요함
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      result:
                        enum: [ERROR]
                      data:
                        enum: [null]
                      error:
                        $ref: '#/components/schemas/ErrorInfo'
              example:
                result: "ERROR"
                data: null
                error:
                  code: "E401"
                  message: "로그인이 필요합니다."
                  data: null
        '409':
          description: 해당 UUID를 사용하는 게임이 이미 존재함
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      result:
                        enum: [ERROR]
                      data:
                        enum: [null]
                      error:
                        $ref: '#/components/schemas/ErrorInfo'
              example:
                result: "ERROR"
                data: null
                error:
                  code: "E409"
                  message: "해당 UUID를 사용하는 게임이 이미 존재합니다."
                  data:
                    gameId: "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"

  /games/{gameId}:
    get:
      summary: 게임 상세 정보 조회
      description: 게임명, 제작자 닉네임, 문제 목록 등 게임 상세 정보를 조회합니다.  
      tags:
        - 게임
      parameters:
        - name: gameId
          in: path
          description: 게임식별자
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: 게임 상세 정보 조회 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      result:
                        enum: [SUCCESS]
                      data:
                        $ref: '#/components/schemas/GameDetailResponse'
                      error:
                        enum: [null]
              example:
                result: "SUCCESS"
                error: null
                data:
                  gameTitle: "xxx"
                  nickname: "xxx"
                  quetionCount: 10
                  version: 1
                  questions:
                    - questionId: 1234
                      questionOrder: 0
                      imageUrl: "xxx"
                      questionText: "xxx"
                      questionAnswer: "xxx"
                      version: 1
                    - questionId: 1235
                      questionOrder: 1
                      imageUrl: "xxx"
                      questionText: "xxx"
                      questionAnswer: "xxx"
                      version: 1
        '404':
          description: 해당 게임이 존재하지 않음
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      result:
                        enum: [ERROR]
                      data:
                        enum: [null]
                      error:
                        $ref: '#/components/schemas/ErrorInfo'
              example:
                result: "ERROR"
                data: null
                error:
                  code: "E404"
                  message: "해당 게임이 존재하지 않습니다."
                  data:
                    gameId: "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"

    put:
      summary: 게임 수정
      description: 기존 게임을 수정합니다. 문제 이미지들은 presigned url 발급 API로 발급받은 url에 업로드된 상태라고 가정합니다.
      tags:
        - 게임
      security:
        - sessionAuth: []
      parameters:
        - name: gameId
          in: path
          description: 게임식별자
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GameUpdateRequest'
            example:
              gameTitle: "xxx"
              gameThumbnailUrl: "xxx"
              version: 1
              questions:
                - imageUrl: "xxx"
                  questionOrder: 0
                  questionText: "xxx"
                  questionAnswer: "xxx"
                - imageUrl: "xxx"
                  questionOrder: 1
                  questionText: "xxx"
                  questionAnswer: "xxx"
      responses:
        '200':
          description: 게임 수정 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      result:
                        enum: [SUCCESS]
                      data:
                        enum: [null]
                      error:
                        enum: [null]
              example:
                result: "SUCCESS"
                data: null
                error: null
        '401':
          description: 로그인이 필요함
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      result:
                        enum: [ERROR]
                      data:
                        enum: [null]
                      error:
                        $ref: '#/components/schemas/ErrorInfo'
              example:
                result: "ERROR"
                data: null
                error:
                  code: "E401"
                  message: "로그인이 필요합니다."
                  data: null
        '403':
          description: 해당 게임에 대한 권한이 없음
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      result:
                        enum: [ERROR]
                      data:
                        enum: [null]
                      error:
                        $ref: '#/components/schemas/ErrorInfo'
              example:
                result: "ERROR"
                data: null
                error:
                  code: "E403"
                  message: "해당 게임에 대한 권한이 없습니다."
                  data:
                    gameId: "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        '404':
          description: 해당 게임이 존재하지 않음
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      result:
                        enum: [ERROR]
                      data:
                        enum: [null]
                      error:
                        $ref: '#/components/schemas/ErrorInfo'
              example:
                result: "ERROR"
                data: null
                error:
                  code: "E404"
                  message: "해당 게임이 존재하지 않습니다."
                  data:
                    gameId: "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        '409':
          description: 동시 수정 충돌
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      result:
                        enum: [ERROR]
                      data:
                        enum: [null]
                      error:
                        $ref: '#/components/schemas/ErrorInfo'
              example:
                result: "ERROR"
                data: null
                error:
                  code: "E409"
                  message: "해당 게임의 정보가 변경되었습니다."
                  data:
                    gameId: "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"

    delete:
      summary: 게임 삭제 (soft delete)
      description: 특정 게임을 삭제합니다. (hard delete가 아닌 soft delete로 수행됩니다.)
      tags:
        - 게임
      security:
        - sessionAuth: []
      parameters:
        - name: gameId
          in: path
          description: 게임식별자
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: 게임 삭제 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      result:
                        enum: [SUCCESS]
                      data:
                        enum: [null]
                      error:
                        enum: [null]
              example:
                result: "SUCCESS"
                data: null
                error: null
        '401':
          description: 로그인이 필요함
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      result:
                        enum: [ERROR]
                      data:
                        enum: [null]
                      error:
                        $ref: '#/components/schemas/ErrorInfo'
              example:
                result: "ERROR"
                data: null
                error:
                  code: "E401"
                  message: "로그인이 필요합니다."
                  data: null
        '403':
          description: 해당 게임에 대한 권한이 없음
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      result:
                        enum: [ERROR]
                      data:
                        enum: [null]
                      error:
                        $ref: '#/components/schemas/ErrorInfo'
              example:
                result: "ERROR"
                data: null
                error:
                  code: "E403"
                  message: "해당 게임에 대한 권한이 없습니다."
                  data:
                    gameId: "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        '404':
          description: 해당 게임이 존재하지 않음
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      result:
                        enum: [ERROR]
                      data:
                        enum: [null]
                      error:
                        $ref: '#/components/schemas/ErrorInfo'
              example:
                result: "ERROR"
                data: null
                error:
                  code: "E404"
                  message: "해당 게임이 존재하지 않습니다."
                  data:
                    gameId: "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx" 

  /users/me/games:
    get:
      summary: 내 게임 목록 조회
      description: |
        내가 만든 게임 목록을 조회합니다. (삭제처리된 게임 제외)
        
        정렬 기준:
        1. 게임수정일시(updatedAt) 기준 내림차순
        2. 게임식별자(gameId) 기준 내림차순 (게임수정일시가 같을 시)
      tags:
        - 사용자
      security:
        - sessionAuth: []
      parameters:
        - name: cursorGameId
          in: query
          description: 직전 API 호출에서 가져온 마지막 게임의 gameId
          required: false
          schema:
            type: string
            format: uuid
        - name: cursorUpdatedAt
          in: query
          description: |
            직전 API 호출에서 가져온 마지막 게임의 updatedAt  
            예시: 2025-07-11T13:45:30
          required: false
          schema:
            type: string
            format: date-time
        - name: limit
          in: query
          description: cursor로부터 몇 개의 데이터를 가져올 것인지에 해당하는 값
          required: true
          schema:
            type: integer
            minimum: 1
      responses:
        '200':
          description: 사용자 게임 목록 조회 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      result:
                        enum: [SUCCESS]
                      data:
                        $ref: '#/components/schemas/UserGameListResponse'
                      error:
                        enum: [null]
              example:
                result: "SUCCESS"
                data:
                  games:
                    - gameId: "xxx"
                      gameThumbnailUrl: "xxx"
                      gameTitle: "xxx"
                      questionCount: 10
                      isShared: true
                      playCount: 2
                      updateAt: "2025-07-11T13:45:30Z"
                    - gameId: "xxx"
                      gameThumbnailUrl: "xxx"
                      gameTitle: "xxx"
                      questionCount: 10
                      isShared: false
                      playCount: 0
                      updateAt: "2025-07-11T13:45:30Z"
                error: null
        '401':
          description: 로그인이 필요함
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      result:
                        enum: [ERROR]
                      data:
                        enum: [null]
                      error:
                        $ref: '#/components/schemas/ErrorInfo'
              example:
                result: "ERROR"
                data: null
                error:
                  code: "E401"
                  message: "로그인이 필요합니다."
                  data: null
        '403':
          description: 해당 게임에 대한 권한이 없음
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      result:
                        enum: [ERROR]
                      data:
                        enum: [null]
                      error:
                        $ref: '#/components/schemas/ErrorInfo'
              example:
                result: "ERROR"
                data: null
                error:
                  code: "E403"
                  message: "해당 게임에 대한 권한이 없습니다."
                  data:
                    gameId: "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        '404':
          description: cursor로 지정한 게임이 존재하지 않음
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      result:
                        enum: [ERROR]
                      data:
                        enum: [null]
                      error:
                        $ref: '#/components/schemas/ErrorInfo'
              example:
                result: "ERROR"
                data: null
                error:
                  code: "E404"
                  message: "해당 게임이 존재하지 않습니다."
                  data:
                    gameId: "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx" 

  /games/{gameId}/share:
    post:
      summary: 게임을 공유 상태로 변경
      description: 특정 게임을 공유 상태로 변경합니다.
      tags:
        - 게임
      security:
        - sessionAuth: []
      parameters:
        - name: gameId
          in: path
          description: 게임식별자
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: 게임 공유 상태 변경 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      result:
                        enum: [SUCCESS]
                      data:
                        enum: [null]
                      error:
                        enum: [null]
              example:
                result: "SUCCESS"
                data: null
                error: null
        '401':
          description: 로그인이 필요함
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      result:
                        enum: [ERROR]
                      data:
                        enum: [null]
                      error:
                        $ref: '#/components/schemas/ErrorInfo'
              example:
                result: "ERROR"
                data: null
                error:
                  code: "E401"
                  message: "로그인이 필요합니다."
                  data: null
        '403':
          description: 해당 게임에 대한 권한이 없음
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      result:
                        enum: [ERROR]
                      data:
                        enum: [null]
                      error:
                        $ref: '#/components/schemas/ErrorInfo'
              example:
                result: "ERROR"
                data: null
                error:
                  code: "E403"
                  message: "해당 게임에 대한 권한이 없습니다."
                  data:
                    gameId: "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        '404':
          description: 해당 게임이 존재하지 않거나 삭제됨
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      result:
                        enum: [ERROR]
                      data:
                        enum: [null]
                      error:
                        $ref: '#/components/schemas/ErrorInfo'
              examples:
                notFoundGame:
                  summary: 존재하지 않는 게임
                  value:
                    result: "ERROR"
                    data: null
                    error:
                      code: "E404"
                      message: "해당 게임이 존재하지 않습니다."
                      data:
                        gameId: "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx" 
                deleteGame:
                  summary: 삭제된 게임
                  value:
                    result: "ERROR"
                    data: null
                    error:
                      code: "E404"
                      message: "삭제된 게임입니다."
                      data:
                        gameId: "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"  

  /games/{gameId}/unshare:
    post:
      summary: 게임을 비공유 상태로 변경
      description: 특정 게임을 비공유 상태로 변경합니다.
      tags:
        - 게임
      security:
        - sessionAuth: []
      parameters:
        - name: gameId
          in: path
          description: 게임식별자
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: 게임 비공유 상태 변경 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      result:
                        enum: [SUCCESS]
                      data:
                        enum: [null]
                      error:
                        enum: [null]
              example:
                result: "SUCCESS"
                data: null
                error: null
        '401':
          description: 로그인이 필요함
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      result:
                        enum: [ERROR]
                      data:
                        enum: [null]
                      error:
                        $ref: '#/components/schemas/ErrorInfo'
              example:
                result: "ERROR"
                data: null
                error:
                  code: "E401"
                  message: "로그인이 필요합니다."
                  data: null
        '403':
          description: 해당 게임에 대한 권한이 없음
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      result:
                        enum: [ERROR]
                      data:
                        enum: [null]
                      error:
                        $ref: '#/components/schemas/ErrorInfo'
              example:
                result: "ERROR"
                data: null
                error:
                  code: "E403"
                  message: "해당 게임에 대한 권한이 없습니다."
                  data:
                    gameId: "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        '404':
          description: 해당 게임이 존재하지 않거나 삭제됨
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      result:
                        enum: [ERROR]
                      data:
                        enum: [null]
                      error:
                        $ref: '#/components/schemas/ErrorInfo'
              examples:
                notFoundGame:
                  summary: 존재하지 않는 게임
                  value:
                    result: "ERROR"
                    data: null
                    error:
                      code: "E404"
                      message: "해당 게임이 존재하지 않습니다."
                      data:
                        gameId: "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx" 
                deleteGame:
                  summary: 삭제된 게임
                  value:
                    result: "ERROR"
                    data: null
                    error:
                      code: "E404"
                      message: "삭제된 게임입니다."
                      data:
                        gameId: "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx" 

  /games/{gameId}/plays:
    post:
      summary: 게임 플레이 횟수 증가
      description: 특정 게임을 시작할 때, 해당 게임의 플레이 횟수를 1 늘립니다.
      tags:
        - 게임
      parameters:
        - name: gameId
          in: path
          description: 게임식별자
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: 플레이 횟수 증가 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      result:
                        enum: [SUCCESS]
                      data:
                        enum: [null]
                      error:
                        enum: [null]
              example:
                result: "SUCCESS"
                data: null
                error: null
        '404':
          description: 해당 게임이 존재하지 않음
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      result:
                        enum: [ERROR]
                      data:
                        enum: [null]
                      error:
                        $ref: '#/components/schemas/ErrorInfo'
              example:
                result: "ERROR"
                data: null
                error:
                  code: "E404"
                  message: "해당 게임이 존재하지 않습니다."
                  data:
                    gameId: "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx" 

  /games/uploads/urls:
    post:
      summary: S3 presigned URL 발급
      description: 클라이언트에서 신규 게임의 문제 이미지 업로드에 사용할 AWS S3 presigned URL을 발급합니다.
      tags:
        - 게임
      security:
        - sessionAuth: []
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PresignedUrlRequest'
            example:
              images:
                - imageName: "x1.png"
                  questionOrder: 0
                - imageName: "x2.png"
                  questionOrder: 2
      responses:
        '200':
          description: presigned url 발급 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      result:
                        enum: [SUCCESS]
                      data:
                        $ref: '#/components/schemas/PresignedUrlResponse'
                      error:
                        enum: [null]
              example:
                result: "SUCCESS"
                data:
                  gameId: "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
                  presignedUrls:
                    - imageName: "x1.png"
                      questionOrder: 0
                      url: "xxxa"
                      key: "games/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/x1.png"
                    - imageName: "x2.png"
                      questionOrder: 2
                      url: "xxxb"
                      key: "games/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/x2.png"
                error: null
        '401':
          description: 로그인이 필요함
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      result:
                        enum: [ERROR]
                      data:
                        enum: [null]
                      error:
                        $ref: '#/components/schemas/ErrorInfo'
              example:
                result: "ERROR"
                data: null
                error:
                  code: "E401"
                  message: "로그인이 필요합니다."
                  data: null 

  /games/{gameId}/uploads/urls:
    post:
      summary: 기존 게임 S3 presigned URL 발급
      description: 클라이언트에서 기존 게임의 문제 이미지 업로드에 사용할 AWS S3 presigned URL을 발급합니다.
      tags:
        - 게임
      security:
        - sessionAuth: []
      parameters:
        - name: gameId
          in: path
          description: 게임식별자
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PresignedUrlRequest'
            example:
              images:
                - imageName: "x1.png"
                  questionOrder: 0
                - imageName: "x2.png"
                  questionOrder: 2
      responses:
        '200':
          description: presigned url 발급 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      result:
                        enum: [SUCCESS]
                      data:
                        $ref: '#/components/schemas/PresignedUrlResponse'
                      error:
                        enum: [null]
              example:
                result: "SUCCESS"
                data:
                  gameId: "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
                  presignedUrls:
                    - imageName: "x1.png"
                      questionOrder: 0
                      url: "xxxa"
                      key: "games/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/x1.png"
                    - imageName: "x2.png"
                      questionOrder: 2
                      url: "xxxb"
                      key: "games/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/x2.png"
                error: null
        '401':
          description: 로그인이 필요함
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      result:
                        enum: [ERROR]
                      data:
                        enum: [null]
                      error:
                        $ref: '#/components/schemas/ErrorInfo'
              example:
                result: "ERROR"
                data: null
                error:
                  code: "E401"
                  message: "로그인이 필요합니다."
                  data: null
        '403':
          description: 해당 게임에 대한 권한이 없음
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      result:
                        enum: [ERROR]
                      data:
                        enum: [null]
                      error:
                        $ref: '#/components/schemas/ErrorInfo'
              example:
                result: "ERROR"
                data: null
                error:
                  code: "E403"
                  message: "해당 게임에 대한 권한이 없습니다."
                  data:
                    gameId: "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        '404':
          description: 해당 게임이 존재하지 않음
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      result:
                        enum: [ERROR]
                      data:
                        enum: [null]
                      error:
                        $ref: '#/components/schemas/ErrorInfo'
              example:
                result: "ERROR"
                data: null
                error:
                  code: "E404"
                  message: "해당 게임이 존재하지 않습니다."
                  data:
                    gameId: "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx" 